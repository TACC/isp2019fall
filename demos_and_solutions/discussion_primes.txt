bool ifprime (int num){
  bool isprime=true;
  for(int i=2; i<num; i++){
    if(num%i == 0)
      isprime = false;
  }
  return isprime;
}

........
  for(int i=2; ; i++){
    isprime =  ifprime(i);
    if(isprime == true){
      cout << i << endl;
      limit++;
    }
    if(limit == num_of_primes)
      break;
  }

....
.... good solution
....

%%%%%%%%%%%%%%%%

        for ( int i =2; number_of_primes < how_many ; i++){
                isprime = test_if_prime(i);
                if (isprime) {
                        cout << i << endl;
                        number_of_primes++;
                }
        }

.... 
.... slightly cleaner termination test
....

%%%%%%%%%%%%%%%%

int multiple_primes(int how_many){
  int num_of_primes_found = 1;
  int current_num = 2;
  bool isprime{true};

  while(num_of_primes_found <= how_many){
    isprime = true;
    for(int factor = 2; factor < current_num; factor++){
      if((current_num%factor) == 0){
        isprime = false;
        break;
      }
    }
    if(isprime == true){
      num_of_primes_found ++;
      cout << current_num << endl;
      current_num++;
    }
    else
      current_num++;
  }
}

....
.... Kinda.
.... this function should really be called
.... "do_everything" : no clear purpose.
.... 

%%%%%%%%%%%%%%%%

bool test_if_prime(int x) {
        for (int i = 2; i <= x/2; i++) {
                if(x %i ==0) {
                return false;
                }
        }
        return true;
}

void print_primes(int how_many) {
        int number_of_primes_found = 0;
        int test_num = 2;
        while (number_of_primes_found < how_many) {
                int is_prime = test_if_prime(test_num);
                if(is_prime == true) {
                        cout << test_num << endl;
                        number_of_primes_found ++;
                }
                test_num++;
        }
}

....
.... if you really want a function to do the output
.... then this is how to do it
....
