%%%%%%%%%%%%%%%% First part

        for (int i = 0; i < 10; i++)
        {
                for (int j = 0; j < 10; j++)
                {
                        if (i * j > input_number)
                        {
                                cout << i << "," << j << endl;
                                first_pair_found = true;
                                break;
                        }
                }
                if (first_pair_found)
                {
                        break;
                }
        }

....
.... This part is easy: ij loop and break out out of
.... see below for other solutions to breaking
.... out of the loop
....

%%%%%%%%%%%%%%%%%%%%%%%%% Second part
....
.... The second part can be solved in several ways
.... You can again use an ij loop and detect
.... the minimal sum. However, the suggested structure
.... is a little different. Here are some solutions
.... with comments
....

%%%%%%%%%%%%%%%%

  for (int sum = 0; sum <= 18 && !wasFound2; sum++) {
    for (int i=0; i<=sum; i++) {
      int j = sum - i;
      if ((i * j) > n) {

....
.... Correct code structure
.... note use of boolean in the loop test
....

%%%%%%%%%%%%%%%%%%%%%%%%%

  int j;
  int ijproduct2;
  for (int ijsum=10; ijsum<100000; ijsum++) {
    for (int i=0; i<ijsum/2+1; i++) {
      j=ijsum-i;
      ijproduct2=i*j;
      if (ijproduct2>N) {
        cout << i << "," << j << endl;
        break;
      }
    }
    if (ijproduct2>N)
      break;
  }

....
.... Also correct structure,
.... using "break" is another way to leave the loops
....

%%%%%%%%%%%%%%%%

        for (int sum=0; sum<19; sum++) {
                for (int i=0; i<10 and i<=sum;i++) {
                        int j = sum - i;
                        if (j<10) {
                                if (i*j>num) {
                                        pairI2=i;
                                        pairJ2=j;
                                        cout << pairI2 << "," << pairJ2 << endl;
                                        goto eop2;
                                }
                        }
                }
        }
        eop2:

....
.... Correct structure
.... however: "goto" is severely discouraged
.... usually leads to bad code
....

%%%%%%%%%%%%%%%%%%%%
  int sum; int smalli=1000; int smallj=1000; int smallsum=1000;
  for(int i=0; i<10;i++){
    for(int j=0;j<10;j++){
      if(i*j>N){
        sum=i+j;
        if(sum<=smallsum){
          smallsum=sum;
          smalli=i;
          smallj=j;

        }//end second if
        break;
      }//end first if
    }//end second for loop
  }//end first for loop

....
.... Probably finds the right solution
.... however, not the best structure
.... just because there is an i,j does not
.... mean you have to iterate over them.
....

%%%%%%%%%%%%%%%%%%

  int i;
  int j;
  int lowi = 0;
  int lowj = 0;
  int cnt = 0;
  int sum = 0;
  int temp = 0;
  int lowii = 0;
  int lowjj = 0;

  for (i = 0; i < 10 ; i++)
      for (j = 0; j < 10; j++)

....
.... Please declare loop variables in the loop header
.... declare variables as local as possible
.... (see for instance collatz2.cxx)
....

%%%%%%%%%%%%%%%%%%%%%

  for ( k = 0; k < 20; k++ ) {
    //Iterate I
    for(i = 0; i < 10; i++) {
        //Iterate K
        for(j = 0; j < 10; j++) {
            if((i+j == k ) && (i*j >number))

....
.... Three loops for a two-dimensional computation
.... but note that the third loop is dummy
....

%%%%%%%%%%%%%%%%

    cout << "Enter an integer N:";
    int N;
    cin >> N;
    for (int i = 0; i < 10; i++)
        for (int j = 0; j < 10; j++)
            if (i*j > N)
                indices.emplace_back(make_pair(i, j));

    cout << indices.front().first << "," << indices.front().second << endl;

    pair<int, int> smallest = make_pair(10, 10);
    for (pair<int, int> p: indices)
        if (p.first*p.second > N && p.first + p.second < smallest.first + smallest.second)
            smallest = p;

....
.... 1. Please use only what you've been taught in class
....    There is a reason for our sequencing of topics.
.... 2. Don't use unnecessarily complicated solutions
.... 3. This solution does not have the right time/space complexity
....
